name: ci
on: [push, pull_request]
jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "${{ secrets.SA_PASSWORD }}"
        ports: ["1433:1433"]
        options: >-
          --health-cmd "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P $SA_PASSWORD -C -Q 'SELECT 1'"
          --health-interval 10s --health-timeout 5s --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build -c Release

      - name: Apply Vehicle DB Migrations
        working-directory: ./src/Vehicle/Vehicle.Db
        run: dotnet run --configuration Release -- --connection "Server=localhost,1433;Database=VehicleDb;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=True"

      - name: Apply Insurance DB Migrations
        working-directory: ./src/Insurance/Insurance.Db
        run: dotnet run --configuration Release -- --connection "Server=localhost,1433;Database=InsuranceDb;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=True"

      - name: Run Unit Tests
        run: |
          dotnet test ./src/Insurance/Insurance.UnitTests/Insurance.UnitTests.csproj -c Release --no-build --collect:"XPlat Code Coverage"
          dotnet test ./src/Vehicle/Vehicle.UnitTests/Vehicle.UnitTests.csproj -c Release --no-build --collect:"XPlat Code Coverage"

      - name: Run Insurance Integration Tests
        env:
          ConnectionStrings__Default: "Server=localhost,1433;Database=InsuranceDb;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=True"
        run: dotnet test ./src/Insurance/Insurance.IntegrationTests/Insurance.IntegrationTests.csproj -c Release --no-build --collect:"XPlat Code Coverage"

      - name: Run Vehicle Integration Tests
        env:
          ConnectionStrings__Default: "Server=localhost,1433;Database=VehicleDb;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=True"
        run: dotnet test ./src/Vehicle/Vehicle.IntegrationTests/Vehicle.IntegrationTests.csproj -c Release --no-build --collect:"XPlat Code Coverage"

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Merge and generate coverage report
        run: |
          reportgenerator \
            -reports:"**/TestResults/*/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"Html;Cobertura"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage/

  publish-packages:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Pack and Push Main Branch Version
        if: github.ref == 'refs/heads/main'
        run: |
          dotnet pack src/Insurance/Insurance.Service.Contracts/Insurance.Service.Contracts.csproj -c Release -o ./packages
          dotnet pack src/Vehicle/Vehicle.Service.Contracts/Vehicle.Service.Contracts.csproj -c Release -o ./packages
          dotnet nuget push "./packages/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Pack and Push Feature Branch Version
        if: github.ref != 'refs/heads/main'
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')

          # Pack Vehicle.Service.Contracts
          VEHICLE_BASE_VERSION=$(grep '<Version>' src/Vehicle/Vehicle.Service.Contracts/Vehicle.Service.Contracts.csproj | sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' | tr -d '[:space:]')
          VEHICLE_VERSION="$VEHICLE_BASE_VERSION-feat-$BRANCH_NAME.$GITHUB_RUN_NUMBER"
          echo "Packing Vehicle.Service.Contracts version $VEHICLE_VERSION"
          dotnet pack src/Vehicle/Vehicle.Service.Contracts/Vehicle.Service.Contracts.csproj -c Release /p:Version=$VEHICLE_VERSION -o ./packages

          # Pack Insurance.Service.Contracts
          INSURANCE_BASE_VERSION=$(grep '<Version>' src/Insurance/Insurance.Service.Contracts/Insurance.Service.Contracts.csproj | sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' | tr -d '[:space:]')
          INSURANCE_VERSION="$INSURANCE_BASE_VERSION-feat-$BRANCH_NAME.$GITHUB_RUN_NUMBER"
          echo "Packing Insurance.Service.Contracts version $INSURANCE_VERSION"
          dotnet pack src/Insurance/Insurance.Service.Contracts/Insurance.Service.Contracts.csproj -c Release /p:Version=$INSURANCE_VERSION -o ./packages

          # Push all packages
          dotnet nuget push "./packages/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
