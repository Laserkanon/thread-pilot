services:
  # Reverse Proxy
  nginx:
    image: nginx:latest
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - vehicle-service
      - insurance-service

  # SQL Server Database
  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - 'SA_PASSWORD=${DB_SA_PASSWORD}'
    ports:
      - "1433:1433"
    healthcheck:
      test: [ "CMD-SHELL", "grep -q 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog || exit 1" ]
      interval: 10s
      retries: 30
      start_period: 60s
      timeout: 5s

  # Vehicle Database Migrator
  vehicle-db-migrator:
    build:
      context: .
      dockerfile: src/Vehicle/Vehicle.Db/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      - ConnectionStrings__Default=Server=sql-server;Database=VehicleDb;User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=True;

  # Insurance Database Migrator
  insurance-db-migrator:
    build:
      context: .
      dockerfile: src/Insurance/Insurance.Db/Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      - ConnectionStrings__Default=Server=sql-server;Database=InsuranceDb;User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=True;

  # Vehicle Service
  vehicle-service:
    build:
      context: .
      dockerfile: src/Vehicle/Vehicle.Service/Dockerfile
      target: dev
    environment:
      - 'ConnectionStrings__Default=Server=sql-server;Database=VehicleDb;User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=True;'
      - ASPNETCORE_URLS=http://0.0.0.0:8080
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/healthz || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 3s

  # Insurance Service
  insurance-service:
    build:
      context: .
      dockerfile: src/Insurance/Insurance.Service/Dockerfile
      target: dev
    depends_on:
      insurance-db-migrator:
        condition: service_completed_successfully
      vehicle-service:
        condition: service_healthy
    environment:
      - 'ConnectionStrings__Default=Server=sql-server;Database=InsuranceDb;User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=True;'
      - VehicleService__BaseUrl=http://vehicle-service:8080
      - ASPNETCORE_URLS=http://0.0.0.0:8080
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/healthz || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 3s
